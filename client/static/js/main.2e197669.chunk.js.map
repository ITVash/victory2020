{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","locale","App","useState","dd","hh","mm","timer","setTimer","useEffect","now","setInterval","till","countdown","format","h","className","ofHour","ofMinuts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAOAA,IAAOC,OAAO,MAEd,IA8FeC,EA9FH,WAAO,IAAD,EACSC,mBAAS,CAClCC,GAAI,EACJC,GAAI,EACJC,GAAI,IAJY,mBACVC,EADU,KACHC,EADG,KA8CjBC,qBAAU,WACT,IAAMC,EAAMV,MAEZW,aAAY,WACX,IAAMC,EAAOZ,IAFD,uBAGNa,EAAYb,IAAOY,EAAOF,GAC1BN,EAAKS,EAAUC,OAAO,KACtBT,EAAKQ,EAAUC,OAAO,MACtBR,EAAKO,EAAUC,OAAO,MAC5BN,EAAS,CAAEJ,KAAIC,KAAIC,SACjB,OAED,CAACE,IACJ,IAAcO,EAuBd,OACC,yBAAKC,UAAU,OACd,6BACC,4JAC0DT,EAAMH,GAAI,KA3BzDW,EA4BER,EAAMH,KA3BZ,IAAMW,GAAK,EAAU,2BAC1BA,GAAK,GAAKA,GAAK,EAAU,qBACnB,IAANA,EAAgB,2BACV,IAANA,EAAgB,gCAApB,EAsBE,IAEyBR,EAAMF,GAF/B,IApBY,SAAAU,GACd,OAAIA,GAAK,IAAMA,GAAK,EAAU,iCAC1BA,GAAK,GAAKA,GAAK,EAAU,2BACzBA,GAAK,IAAMA,GAAK,GAAW,2BACrB,IAANA,GAAiB,KAANA,EAAiB,qBACtB,IAANA,EAAgB,sCAApB,EAiBsCE,CAAOV,EAAMF,IAFjD,IAEuDE,EAAMD,GAF7D,IAbe,SAAAS,GACf,OAAU,IAANA,GAAiB,KAANA,GAAkB,KAANA,GAAkB,KAANA,GAAkB,KAANA,EAAiB,uCAChEA,GAAK,GAAKA,GAAK,EAAU,uCACzBA,GAAK,IAAMA,GAAK,GAAW,uCAC3BA,GAAK,IAAMA,GAAK,GAAW,uCAC3BA,GAAK,IAAMA,GAAK,GAAW,uCAC3BA,GAAK,IAAMA,GAAK,GAAW,uCAC3BA,GAAK,GAAKA,GAAK,GAAW,sCAA9B,EAQkEG,CAASX,EAAMD,IAFjF,QClFgBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e197669.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\n//import { post } from 'axios'\nimport moment from \"moment\"\n//import 'moment-countdown'\nimport \"moment/locale/ru\"\n\n//import { Header, Footer } from './components'\nmoment.locale(\"ru\")\n\nconst App = () => {\n\tconst [timer, setTimer] = useState({\n\t\tdd: 0,\n\t\thh: 0,\n\t\tmm: 0,\n\t})\n\t//const [file, setFile] = useState(null)\n\t/*const handleChange = e => {\n    const files = e.target.files\n    const data = []\n    let items\n    for (let i = 0; i < files.length; i++) {\n      items = files[i]\n      data.push({\n        items,\n        clientID:'5e48fa7a55f0b81e382728b4'\n      })\n    }\n    setFile(data)\n    console.log('object', e.target.files)\n  }\n  const handleClick = () => {\n    const datas = new FormData()\n    file.map(item => {\n      datas.append('file', item.items)\n    })\n    datas.append('clientID', '5e48fa7a55f0b81e382728b4')\n    post(`http://localhost:4000/api/attachments`, datas)\n      .then(({ data }) => { console.log('data', data) })\n    \n  }\n  window.filezzz = file*/\n\t/**\n   * <h1>Начало работы!</h1>\n      <input type=\"file\" multiple onChange={e => handleChange(e)} />\n      <button onClick={ handleClick }>ЗАГРУЗИТЬ</button>\n   */\n\n\t//let time\n\n\t/*const timer = () => {\n    const now = new Date()\n    const auto = '2020-03-15 08:00:00'\n    time = moment(now).countdown(auto).toString()\n    //setInterval(()=>{timer()}, 500)\n  }*/\n\tuseEffect(() => {\n\t\tconst now = moment()\n\t\tconst auto = \"2020-03-15 08:00:00\"\n\t\tsetInterval(() => {\n\t\t\tconst till = moment(auto)\n\t\t\tconst countdown = moment(till - now)\n\t\t\tconst dd = countdown.format(\"D\")\n\t\t\tconst hh = countdown.format(\"HH\")\n\t\t\tconst mm = countdown.format(\"mm\")\n\t\t\tsetTimer({ dd, hh, mm })\n\t\t}, 500)\n\t\t//if (interval) {clearInterval(interval)}\n\t}, [setTimer])\n\tconst ofDay = h => {\n\t\tif (h <= 20 && h >= 5) return \"дней\"\n\t\tif (h >= 2 && h <= 4) return \"дня\"\n\t\tif (h === 1) return \"день\"\n\t\tif (h === 0) return \"дней\"\n\t}\n\tconst ofHour = h => {\n\t\tif (h <= 20 && h >= 5) return \"часов\"\n\t\tif (h >= 2 && h <= 4) return \"часа\"\n\t\tif (h >= 22 && h <= 24) return \"часа\"\n\t\tif (h === 1 || h === 21) return \"час\"\n\t\tif (h === 0) return \"часов\"\n  }\n  const ofMinuts = h => {\n    if (h === 1 || h === 21 || h === 31 || h === 41 || h === 51) return 'минуту'\n    if (h >= 2 && h <= 4) return 'минуты'\n    if (h >= 22 && h <= 24) return 'минуты'\n    if (h >= 32 && h <= 34) return 'минуты'\n    if (h >= 42 && h <= 44) return 'минуты'\n    if (h >= 52 && h <= 54) return 'минуты'\n    if (h >= 5 && h <= 59) return 'минут'\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div>\n\t\t\t\t<span>\n\t\t\t\t\tСтарт приложения через {/*auto.endOf('hour').fromNow()*/ timer.dd}{\" \"}\n          {ofDay(timer.dd)} {timer.hh} {ofHour(timer.hh)} {timer.mm} {ofMinuts(timer.mm)}!\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.scss\"\nimport \"antd/dist/antd.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}